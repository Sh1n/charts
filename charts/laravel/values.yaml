replicaCount: 1

#
# The POD exposing the service will be composed of two
# containers. One for Nginx and one running php-fpm. 
# Respectively, reverseProxyImage and appImage
#
reverseProxyImage:
  repository: nginx
  tag: stable
  pullPolicy: IfNotPresent
  configName: ""

appImage:
  repository: php
  tag: 7-fpm
  pullPolicy: IfNotPresent
  configName: ""

queue:
  replicaCount: 2
  image:
    repository: php
    tag: 7-fpm
    pullPolicy: IfNotPresent
  configName: ""

scheduler:
  replicaCount: 1
  image:
    repository: php
    tag: 7-fpm
    pullPolicy: IfNotPresent
  configName: ""



imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: []

  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}
